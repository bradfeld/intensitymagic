name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Quality Assurance - runs on every PR and push
  quality-check:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript type check
        run: npm run type-check

      - name: 🧹 ESLint check
        run: npm run lint

      - name: 🎨 Prettier format check
        run: npm run format:check

      - name: 🧪 Unit tests
        run: npm run test
        env:
          CI: true

      - name: 🏗️ Build test
        # Use secrets in normal runs; inject safe fallbacks when actor is Dependabot
        run: |
          if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            echo "Using fallback env for Dependabot PR build"
            echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_dummy" >> $GITHUB_ENV
            echo "CLERK_SECRET_KEY=sk_test_dummy" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_SUPABASE_URL=http://localhost" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=dummy" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=dummy" >> $GITHUB_ENV
            echo "OPENAI_API_KEY=sk-dummy" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> $GITHUB_ENV
            echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_CLERK_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_CLERK_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          fi
          npm run build
        env:
          # Provide required env vars for build
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: 🧪 E2E tests (Playwright)
        run: |
          npx playwright install --with-deps
          # Provide env for Next.js server during Playwright run (Dependabot-safe fallbacks)
          if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            export NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_dummy
            export CLERK_SECRET_KEY=sk_test_dummy
            export NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
            export NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
            export NEXT_PUBLIC_SUPABASE_URL=http://localhost
            export NEXT_PUBLIC_SUPABASE_ANON_KEY=dummy
            export SUPABASE_SERVICE_ROLE_KEY=dummy
            export OPENAI_API_KEY=sk-dummy
          else
            export NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY='${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}'
            export CLERK_SECRET_KEY='${{ secrets.CLERK_SECRET_KEY }}'
            export NEXT_PUBLIC_CLERK_SIGN_IN_URL='${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}'
            export NEXT_PUBLIC_CLERK_SIGN_UP_URL='${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}'
            export NEXT_PUBLIC_SUPABASE_URL='${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}'
            export NEXT_PUBLIC_SUPABASE_ANON_KEY='${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}'
            export SUPABASE_SERVICE_ROLE_KEY='${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}'
            export OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}'
          fi
          npm run test:e2e
        env:
          CI: true

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔒 Security audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Check for vulnerable dependencies
        run: npm audit --production

  # Deploy to Vercel Preview (for PRs)
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit]
    # Disabled: rely on Vercel GitHub App for preview deployments
    if: ${{ false }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Vercel CLI
        run: npm install --global vercel@canary

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: echo "preview_url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT

      - name: 💬 Comment Preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployment ready!**
              
              Preview URL: ${{ steps.deploy.outputs.preview_url }}
              
              ✅ TypeScript: Passed
              ✅ ESLint: Passed  
              ✅ Build: Passed
              ✅ Security: Passed`
            })

  # Deploy to Production (disabled; rely on Vercel GitHub App auto-deploys)
  # deploy-production:
  #   name: 🚀 Deploy Production
  #   runs-on: ubuntu-latest
  #   needs: [quality-check, security-audit]
  #   if: ${{ false }}
  #   steps:
  #     - run: echo "Disabled in favor of Vercel auto-deploys on push to main"
