#!/usr/bin/env sh
# ============================================================================
# Husky Pre-Commit Hook Template
# ============================================================================
# This hook runs before every commit to:
# 1. Scan for secrets using Gitleaks
# 2. Run lint-staged for code quality
#
# Installation:
# 1. Copy to .husky/pre-commit
# 2. Make executable: chmod +x .husky/pre-commit
# 3. Ensure gitleaks is installed: brew install gitleaks (macOS)

. "$(dirname -- "$0")/_/husky.sh"

# ============================================================================
# SECRET DETECTION WITH GITLEAKS
# ============================================================================
echo "üîç Scanning staged files for secrets..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
  echo "‚úÖ No files staged for commit"
  exit 0
fi

# Check if gitleaks is installed
if ! command -v gitleaks &> /dev/null; then
  echo "‚ö†Ô∏è  Warning: gitleaks not found. Secret scanning skipped."
  echo "Install with: brew install gitleaks (macOS) or see docs/SECRET_SCANNING.md"
  echo ""
else
  # Create temporary directory for gitleaks scan
  TEMP_DIR=$(mktemp -d)
  trap "rm -rf $TEMP_DIR" EXIT

  # Copy staged files to temp directory maintaining structure
  for file in $STAGED_FILES; do
    mkdir -p "$TEMP_DIR/$(dirname "$file")"
    git show :"$file" > "$TEMP_DIR/$file" 2>/dev/null
  done

  # Scan the temp directory
  gitleaks detect --source "$TEMP_DIR" --verbose --redact --no-git

  if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå Gitleaks detected potential secrets in your staged files!"
    echo ""
    echo "To fix this:"
    echo "1. Remove the secret from the file"
    echo "2. Add it to .env.local (never committed)"
    echo "3. If it's a false positive, update .gitleaks.toml allowlist"
    echo ""
    echo "To bypass this check (NOT RECOMMENDED):"
    echo "  git commit --no-verify"
    echo ""
    exit 1
  fi

  echo "‚úÖ No secrets detected"
fi

# ============================================================================
# LINT-STAGED (Code Quality)
# ============================================================================
# Runs ESLint and Prettier on staged files
# Configured in package.json under "lint-staged"

echo "üîß Running lint-staged..."
npx lint-staged

if [ $? -ne 0 ]; then
  echo ""
  echo "‚ùå Lint-staged failed. Fix the issues and try again."
  echo ""
  exit 1
fi

echo "‚úÖ All pre-commit checks passed"
exit 0
