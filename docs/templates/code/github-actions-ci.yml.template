# ============================================================================
# GitHub Actions CI/CD Pipeline Template
# ============================================================================
# This workflow runs on pull requests and pushes to main branch
# It performs:
# 1. TypeScript type checking
# 2. ESLint validation
# 3. Build verification
# 4. Optional: Test execution
#
# Save to: .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Concurrency: Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # Type Check Job
  # ============================================================================
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

  # ============================================================================
  # Lint Job
  # ============================================================================
  lint:
    name: ESLint Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # ============================================================================
  # Build Job
  # ============================================================================
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [type-check, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          # Add required build-time environment variables
          # These should be safe to expose (public keys only)
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next
          retention-days: 1

  # ============================================================================
  # Test Job (Optional - Enable if you have tests)
  # ============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [type-check, lint]
    if: false  # Set to 'true' to enable tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test
        env:
          NODE_ENV: test

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          retention-days: 7

  # ============================================================================
  # E2E Test Job (Optional - Enable if you have Playwright tests)
  # ============================================================================
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]
    if: false  # Set to 'true' to enable E2E tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          # Add test environment variables
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7

  # ============================================================================
  # Secret Scanning Job (Optional - Requires gitleaks)
  # ============================================================================
  secrets-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: false  # Set to 'true' to enable secret scanning in CI

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Status Check Job (Required for branch protection)
  # ============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [type-check, lint, build]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          fi
          echo "✅ All CI jobs passed"

# ============================================================================
# NOTES
# ============================================================================
# - Configure GitHub Secrets in repository settings
# - Enable branch protection rules to require CI success
# - Adjust timeout values based on your project size
# - Enable optional jobs (test, e2e, secrets-scan) as needed
# - Vercel handles deployment automatically (no need for deploy job)
